"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[547],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(r),m=a,k=s["".concat(c,".").concat(m)]||s[m]||d[m]||l;return r?n.createElement(k,i(i({ref:t},u),{},{components:r})):n.createElement(k,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},7710:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var n=r(2122),a=r(9756),l=(r(7294),r(3905)),i=["components"],o={sidebar_position:5},c="$directive",p={unversionedId:"renderer/reference/$directive",id:"renderer/reference/$directive",isDocsHomePage:!1,title:"$directive",description:"Create a unique directive to add custom behavior to your page.",source:"@site/docs/renderer/reference/$directive.md",sourceDirName:"renderer/reference",slug:"/renderer/reference/$directive",permalink:"/docs/renderer/reference/$directive",editUrl:"https://github.com/sripkunda/accent/tree/master/docs/docs/renderer/reference/$directive.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"$context",permalink:"/docs/renderer/reference/$context"},next:{title:"ac-context",permalink:"/docs/renderer/reference/ac-context"}},u=[{value:"Parameters",id:"parameters",children:[]},{value:"Example",id:"example",children:[]}],d={toc:u};function s(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"directive"},"$directive"),(0,l.kt)("p",null,"Create a unique directive to add custom behavior to your page."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Important:")," Accent will only detect and store elements with custom directives ",(0,l.kt)("strong",{parentName:"p"},"at runtime"),". This means that directives declared after the current page has loaded will not be re-executed.")),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The identifier of the directive. This will affect how you access it in your view.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"instructions"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"function")),(0,l.kt)("td",{parentName:"tr",align:null},"The custom behavior of your directive.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"prefix"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"prefix")),(0,l.kt)("td",{parentName:"tr",align:null},"The prefix of your directive. The default is ",(0,l.kt)("inlineCode",{parentName:"td"},"ac-"),", but you can use ",(0,l.kt)("inlineCode",{parentName:"td"},'""')," if you do not want a prefix.")))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"instructions")," function is called with the following parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"element"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement")),(0,l.kt)("td",{parentName:"tr",align:null},"The element that the directive was used on")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The value of your directive.")))),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"Let's create a ",(0,l.kt)("inlineCode",{parentName:"p"},"style-bg")," directive that sets the background color of the attributed element to whatever value is given."),(0,l.kt)("p",null,"For example, in the below example, the ",(0,l.kt)("inlineCode",{parentName:"p"},"<p>")," tag should have a blue background color."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"HTML:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<p style-bg="red">This is red!</p>\n<p style-bg="blue">This is blue!</p>\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"JS:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'Accent.$directive(\n  "bg",\n  (el, value) => {\n    el.style.backgroundColor = value;\n  },\n  "style-"\n);\n')),(0,l.kt)("p",null,"Now, let's create a new directive with the same prefix, but this time we'll change the color of the element. We'll call this directive ",(0,l.kt)("inlineCode",{parentName:"p"},"style-color"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'Accent.$directive(\n  "color",\n  (el, value) => {\n    el.style.color = value;\n  },\n  "style-"\n);\n')),(0,l.kt)("p",null,"To make the text of both ",(0,l.kt)("inlineCode",{parentName:"p"},"<p>")," tags white, we can now do:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<p style-bg="red" style-color="white">This is red!</p>\n<p style-bg="blue" style-color="white">This is blue!</p>\n')))}s.isMDXComponent=!0}}]);