"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[752],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6971:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],c={sidebar_position:9},l="ac-on",s={unversionedId:"renderer/reference/ac-on",id:"renderer/reference/ac-on",isDocsHomePage:!1,title:"ac-on",description:"Create context-aware event listeners on elements.",source:"@site/docs/renderer/reference/ac-on.md",sourceDirName:"renderer/reference",slug:"/renderer/reference/ac-on",permalink:"/docs/renderer/reference/ac-on",editUrl:"https://github.com/sripkunda/accent/tree/master/docs/docs/renderer/reference/ac-on.md",version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"ac-model",permalink:"/docs/renderer/reference/ac-model"},next:{title:"ac-click",permalink:"/docs/renderer/reference/ac-click"}},p=[{value:"Usage",id:"usage",children:[{value:"Creating Event Listeners",id:"creating-event-listeners",children:[]},{value:"Accessing Members in Context",id:"accessing-members-in-context",children:[]},{value:"Multiple Event Listeners",id:"multiple-event-listeners",children:[]}]}],u={toc:p};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ac-on"},"ac-on"),(0,a.kt)("p",null,"Create context-aware event listeners on elements."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"creating-event-listeners"},"Creating Event Listeners"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ac-on")," directive uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," secondary prefix to denote specific event listeners. Multiple event listeners can be added by including multiple ",(0,a.kt)("inlineCode",{parentName:"p"},":")," notations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Usage:")," ",(0,a.kt)("inlineCode",{parentName:"p"},'<element ac-on *event="action"></element>')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," The ",(0,a.kt)("inlineCode",{parentName:"p"},"ac-on")," directive must be included in order to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," helper prefix.")),(0,a.kt)("p",null,"In the below example, we are adding an onclick event. In this case, it acts similarly to the defualt HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"onclick")," attribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<button ac-on *onclick=\"alert('The button has been clicked')\">Click Me</button>\n")),(0,a.kt)("h3",{id:"accessing-members-in-context"},"Accessing Members in Context"),(0,a.kt)("p",null,"Unlike the default HTML event listeners, ",(0,a.kt)("inlineCode",{parentName:"p"},"ac-on")," allows for access to the local context through the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword, where ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," refers to the scope of the context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<body ac-context=\"{ foo: 'bar' }\">\n  <button ac-on *onclick=\"alert(this.foo);\">Click Me</button>\n  \x3c!-- Alerts 'bar' --\x3e\n</body>\n")),(0,a.kt)("p",null,"In the example above, we are accessing the ",(0,a.kt)("inlineCode",{parentName:"p"},"foo")," variable through the ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," keyword in the ",(0,a.kt)("inlineCode",{parentName:"p"},"*onclick")," event."),(0,a.kt)("h3",{id:"multiple-event-listeners"},"Multiple Event Listeners"),(0,a.kt)("p",null,"Using the concept of the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," secondary prefix, we can add multiple event listeners on an element."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<body ac-context=\"{ foo: 'bar' }\">\n  <button\n    ac-on\n    *onclick=\"alert(this.foo);\"\n    *onmouseover=\"alert('Your mosue hovered over me!')\"\n  >\n    Click Me\n  </button>\n  \x3c!-- Alerts 'bar' --\x3e\n</body>\n")),(0,a.kt)("p",null,"In the example above, we added both the ",(0,a.kt)("inlineCode",{parentName:"p"},"*onclick")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"*onmouseover")," events to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<button>")," element."))}d.isMDXComponent=!0}}]);